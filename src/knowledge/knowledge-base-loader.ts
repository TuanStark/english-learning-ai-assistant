import { Injectable, Logger } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

export interface KnowledgeBase {
  realEstateKnowledge: string;
  websiteContext: string;
  enhancedPrompt: string;
  conversationExamples: string;
  isLoaded: boolean;
}

@Injectable()
export class KnowledgeBaseLoader {
  private readonly logger = new Logger(KnowledgeBaseLoader.name);
  private knowledgeBase: KnowledgeBase;
  private readonly basePath: string;

  constructor() {
    this.knowledgeBase = {
      realEstateKnowledge: '',
      websiteContext: '',
      enhancedPrompt: '',
      conversationExamples: '',
      isLoaded: false
    };
    
    this.basePath = path.join(__dirname, '../knowledge/real_estate_domain');
  }

  /**
   * Load all knowledge base files
   */
  async loadKnowledgeBase(): Promise<void> {
    try {
      this.logger.log('Loading real estate knowledge base...');

      // Load real estate domain knowledge
      this.knowledgeBase.realEstateKnowledge = await this.loadFile(
        path.join(this.basePath, 'documents', 'real_estate_knowledge.md')
      );

      // Load website context
      this.knowledgeBase.websiteContext = await this.loadFile(
        path.join(this.basePath, 'context', 'website_context.md')
      );

      // Load enhanced prompts
      this.knowledgeBase.enhancedPrompt = await this.loadFile(
        path.join(this.basePath, 'prompts', 'enhanced_agent_prompt.md')
      );

      // Load conversation examples
      this.knowledgeBase.conversationExamples = await this.loadFile(
        path.join(this.basePath, 'examples', 'conversation_examples.md')
      );

      this.knowledgeBase.isLoaded = true;
      
      this.logger.log('Knowledge base loaded successfully', {
        realEstateKnowledge: this.knowledgeBase.realEstateKnowledge.length,
        websiteContext: this.knowledgeBase.websiteContext.length,
        enhancedPrompt: this.knowledgeBase.enhancedPrompt.length,
        conversationExamples: this.knowledgeBase.conversationExamples.length
      });
    } catch (error) {
      this.logger.error('Failed to load knowledge base', error);
      this.knowledgeBase.isLoaded = false;
      throw error;
    }
  }

  /**
   * Load a single file
   */
  private async loadFile(filePath: string): Promise<string> {
    try {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        this.logger.debug(`Loaded file: ${path.basename(filePath)}`, {
          size: content.length
        });
        return content;
      } else {
        this.logger.warn(`File not found: ${filePath}`);
        return '';
      }
    } catch (error) {
      this.logger.error(`Failed to load file: ${filePath}`, error);
      return '';
    }
  }

  /**
   * Get enhanced system prompt with knowledge base
   */
  getEnhancedSystemPrompt(basePrompt: string): string {
    if (!this.knowledgeBase.isLoaded) {
      this.logger.warn('Knowledge base not loaded, using base prompt');
      return basePrompt;
    }

    const enhancedPrompt = `${basePrompt}

${this.knowledgeBase.enhancedPrompt}

üìö KI·∫æN TH·ª®C CHUY√äN M√îN:
${this.knowledgeBase.realEstateKnowledge}

üåê B·ªêI C·∫¢NH WEBSITE:
${this.knowledgeBase.websiteContext}

üí¨ V√ç D·ª§ H·ªòI THO·∫†I:
${this.knowledgeBase.conversationExamples}`;

    return enhancedPrompt;
  }

  /**
   * Get specific knowledge section
   */
  getKnowledgeSection(section: 'realEstate' | 'website' | 'prompt' | 'examples'): string {
    if (!this.knowledgeBase.isLoaded) {
      return '';
    }

    switch (section) {
      case 'realEstate':
        return this.knowledgeBase.realEstateKnowledge;
      case 'website':
        return this.knowledgeBase.websiteContext;
      case 'prompt':
        return this.knowledgeBase.enhancedPrompt;
      case 'examples':
        return this.knowledgeBase.conversationExamples;
      default:
        return '';
    }
  }

  /**
   * Check if knowledge base is loaded
   */
  isKnowledgeLoaded(): boolean {
    return this.knowledgeBase.isLoaded;
  }

  /**
   * Get relevant knowledge for a query
   */
  async getRelevantKnowledge(query: string): Promise<any[]> {
    if (!this.knowledgeBase.isLoaded) {
      this.logger.warn('Knowledge base not loaded, cannot get relevant knowledge');
      return [];
    }

    const normalizedQuery = query.toLowerCase();
    const relevantKnowledge: any[] = [];

    try {
      // Ph√¢n t√≠ch landmarks v√† ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng
      const landmarks = this.extractLandmarkInfo(normalizedQuery);
      if (landmarks.length > 0) {
        relevantKnowledge.push(...landmarks);
      }

      // Ph√¢n t√≠ch th√¥ng tin khu v·ª±c
      const areaInfo = this.extractAreaInfo(normalizedQuery);
      if (areaInfo.length > 0) {
        relevantKnowledge.push(...areaInfo);
      }

      // Ph√¢n t√≠ch th√¥ng tin ƒë·ªãa l√Ω
      const locationInfo = this.extractLocationInfo(normalizedQuery);
      if (locationInfo.length > 0) {
        relevantKnowledge.push(...locationInfo);
      }

      this.logger.log('Extracted relevant knowledge', {
        query: query.substring(0, 50),
        knowledgeCount: relevantKnowledge.length,
        types: relevantKnowledge.map(k => k.type)
      });

      return relevantKnowledge;
    } catch (error) {
      this.logger.error('Failed to extract relevant knowledge', {
        error: error.message,
        query: query.substring(0, 50)
      });
      return [];
    }
  }

  /**
   * Extract landmark information from query
   */
  private extractLandmarkInfo(query: string): any[] {
    const landmarks = [
      {
        names: ['c·∫ßu r·ªìng', 'cau rong', 'dragon bridge'],
        data: {
          location: 'H·∫£i Ch√¢u',
          coordinates: { lat: 16.0544, lng: 108.2272 },
          radius: 2000, // 2km radius
          nearbyAreas: ['H·∫£i Ch√¢u', 'S∆°n Tr√†'],
          description: 'C·∫ßu R·ªìng - bi·ªÉu t∆∞·ª£ng c·ªßa ƒê√† N·∫µng'
        }
      },
      {
        names: ['c·∫ßu t√¨nh y√™u', 'cau tinh yeu', 'love bridge'],
        data: {
          location: 'S∆°n Tr√†',
          coordinates: { lat: 16.0838, lng: 108.2441 },
          radius: 1500,
          nearbyAreas: ['S∆°n Tr√†', 'Ng≈© H√†nh S∆°n'],
          description: 'C·∫ßu T√¨nh Y√™u tr√™n b√°n ƒë·∫£o S∆°n Tr√†'
        }
      },
      {
        names: ['ch√πa linh ung', 'chua linh ung', 'linh ung pagoda'],
        data: {
          location: 'S∆°n Tr√†',
          coordinates: { lat: 16.1102, lng: 108.2653 },
          radius: 3000,
          nearbyAreas: ['S∆°n Tr√†', 'Ng≈© H√†nh S∆°n'],
          description: 'Ch√πa Linh ·ª®ng tr√™n b√°n ƒë·∫£o S∆°n Tr√†'
        }
      },
      {
        names: ['b√† n√† hills', 'ba na hills', 'bana hills'],
        data: {
          location: 'H√≤a Vang',
          coordinates: { lat: 15.9969, lng: 107.9881 },
          radius: 5000,
          nearbyAreas: ['H√≤a Vang', 'Li√™n Chi·ªÉu'],
          description: 'Khu du l·ªãch B√† N√† Hills'
        }
      },
      {
        names: ['ng≈© h√†nh s∆°n', 'ngu hanh son', 'marble mountains'],
        data: {
          location: 'Ng≈© H√†nh S∆°n',
          coordinates: { lat: 16.0042, lng: 108.2653 },
          radius: 2500,
          nearbyAreas: ['Ng≈© H√†nh S∆°n', 'S∆°n Tr√†', 'H√≤a Vang'],
          description: 'Ng≈© H√†nh S∆°n - n√∫i ƒë√° c·∫©m th·∫°ch n·ªïi ti·∫øng'
        }
      }
    ];

    const found: any[] = [];
    for (const landmark of landmarks) {
      for (const name of landmark.names) {
        if (query.includes(name)) {
          found.push({
            type: 'landmark',
            name: landmark.names[0],
            data: landmark.data
          });
          break;
        }
      }
    }

    return found;
  }

  /**
   * Extract area information from query
   */
  private extractAreaInfo(query: string): any[] {
    const areas = [
      {
        names: ['h·∫£i ch√¢u', 'hai chau'],
        data: {
          propertyTypes: ['cƒÉn h·ªô', 'shophouse', 'vƒÉn ph√≤ng'],
          priceRange: { min: 2000000000, max: 8000000000 },
          characteristics: ['trung t√¢m', 's·∫ßm u·∫•t', 'ti·ªán √≠ch ƒë·∫ßy ƒë·ªß'],
          nearbyLandmarks: ['c·∫ßu r·ªìng', 'ch·ª£ h√†n']
        }
      },
      {
        names: ['s∆°n tr√†', 'son tra'],
        data: {
          propertyTypes: ['bi·ªát th·ª±', 'cƒÉn h·ªô cao c·∫•p', 'resort'],
          priceRange: { min: 5000000000, max: 20000000000 },
          characteristics: ['view bi·ªÉn', 'kh√¥ng kh√≠ trong l√†nh', 'y√™n tƒ©nh'],
          nearbyLandmarks: ['ch√πa linh ·ª©ng', 'c·∫ßu t√¨nh y√™u']
        }
      },
      {
        names: ['thanh kh√™', 'thanh khe'],
        data: {
          propertyTypes: ['cƒÉn h·ªô', 'nh√† ri√™ng', 'ƒë·∫•t n·ªÅn'],
          priceRange: { min: 1500000000, max: 5000000000 },
          characteristics: ['khu c√¥ng ngh·ªá', 'ph√°t tri·ªÉn nhanh', 'gi√° h·ª£p l√Ω'],
          nearbyLandmarks: ['khu c√¥ng ngh·ªá cao']
        }
      }
    ];

    const found: any[] = [];
    for (const area of areas) {
      for (const name of area.names) {
        if (query.includes(name)) {
          found.push({
            type: 'area_info',
            name: area.names[0],
            data: area.data
          });
          break;
        }
      }
    }

    return found;
  }

  /**
   * Extract location information from query
   */
  private extractLocationInfo(query: string): any[] {
    const locations = [
      {
        keywords: ['g·∫ßn bi·ªÉn', 'gan bien', 'near beach', 'view bi·ªÉn', 'view bien'],
        data: {
          nearbyAreas: ['S∆°n Tr√†', 'Ng≈© H√†nh S∆°n', 'H√≤a Vang'],
          propertyTypes: ['bi·ªát th·ª±', 'cƒÉn h·ªô cao c·∫•p'],
          priceAdjustment: 1.3 // TƒÉng gi√° 30% cho property g·∫ßn bi·ªÉn
        }
      },
      {
        keywords: ['trung t√¢m', 'trung tam', 'downtown', 'city center'],
        data: {
          nearbyAreas: ['H·∫£i Ch√¢u', 'Thanh Kh√™'],
          propertyTypes: ['cƒÉn h·ªô', 'shophouse', 'vƒÉn ph√≤ng'],
          priceAdjustment: 1.2 // TƒÉng gi√° 20% cho property trung t√¢m
        }
      },
      {
        keywords: ['y√™n tƒ©nh', 'yen tinh', 'quiet', 'peaceful'],
        data: {
          nearbyAreas: ['H√≤a Vang', 'Li√™n Chi·ªÉu', 'C·∫©m L·ªá'],
          propertyTypes: ['bi·ªát th·ª±', 'nh√† ri√™ng', 'ƒë·∫•t n·ªÅn'],
          priceAdjustment: 0.9 // Gi·∫£m gi√° 10% cho khu v·ª±c y√™n tƒ©nh
        }
      }
    ];

    const found: any[] = [];
    for (const location of locations) {
      for (const keyword of location.keywords) {
        if (query.includes(keyword)) {
          found.push({
            type: 'location',
            keyword,
            data: location.data
          });
          break;
        }
      }
    }

    return found;
  }

  /**
   * Get knowledge base stats
   */
  getStats(): any {
    return {
      isLoaded: this.knowledgeBase.isLoaded,
      realEstateKnowledge: this.knowledgeBase.realEstateKnowledge.length,
      websiteContext: this.knowledgeBase.websiteContext.length,
      enhancedPrompt: this.knowledgeBase.enhancedPrompt.length,
      conversationExamples: this.knowledgeBase.conversationExamples.length,
      totalSize: Object.values(this.knowledgeBase)
        .filter(v => typeof v === 'string')
        .reduce((sum, content) => sum + content.length, 0)
    };
  }
}
